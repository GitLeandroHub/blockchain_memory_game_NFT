{"ast":null,"code":"import _toConsumableArray from \"D:\\\\blockchain\\\\game\\\\blochchain_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"D:\\\\blockchain\\\\game\\\\blochchain_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/regenerator\";\nimport _asyncToGenerator from \"D:\\\\blockchain\\\\game\\\\blochchain_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/asyncToGenerator\";\nimport _classCallCheck from \"D:\\\\blockchain\\\\game\\\\blochchain_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/classCallCheck\";\nimport _createClass from \"D:\\\\blockchain\\\\game\\\\blochchain_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createClass\";\nimport _inherits from \"D:\\\\blockchain\\\\game\\\\blochchain_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/inherits\";\nimport _createSuper from \"D:\\\\blockchain\\\\game\\\\blochchain_game\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/createSuper\";\nvar _jsxFileName = \"D:\\\\blockchain\\\\game\\\\blochchain_game\\\\src\\\\components\\\\App.js\";\nimport React, { Component } from 'react';\nimport Web3 from 'web3';\nimport './App.css';\nimport MemoryToken from '../abis/MemoryToken.json';\nimport brain from '../brain.png'; //client side of the application\n//This is the Main file write for the client side code a \"React.js\" compoment based \"class Name extends React.Component\" extends is where is inherits its behaviors. Mixins \n//React is a framework for building user interfacer in javascript mixin wuth html. React have a state object that stores the state of the application. State is like a kind of small database that stores inside the website \n//Memory Tokens string write on the top and \"brain\" logo on the left imported on the top of the file \n//Layout - A Nav bar \"the black navigation menu on the top of the page\"\n//Imported basic CSS from App.css that's using \"boostrap\" a UI framework for the nice style as in the site here \"&nbsp;\"\n//The webbrowser is already connected to the blockchain using truffle and ganache with metamask\n//It's time to connect the webApp to the blockchain using web3.js \n//Now the application is connected to the blockchain\n//and Metamask is connected, React App is working and talking to the blockchain\n//Now it's time to connect the Smart Contract from the blockchain and bring to the App as well\n//So this is the token created on \"MemoryToken.sol\" and bring into the App and load that information and put\n//into the state object as well. First import the Token on the on the top of the file. The \"ABI\" file.\n//First thing to do is to determine the network(ID) we connect to with ganache, because this tells the specific location of the address from the contract \n//Fetch the token smart contract - ok\n//now fetch the total supply\n//Now, load all the tokens \"for loop on test\"\n//Now all the blockchain data is loaded into the app\n//Now, fill out the states of other part of the game \n//Component called App\n\nvar App = /*#__PURE__*/function (_Component) {\n  _inherits(App, _Component);\n\n  var _super = _createSuper(App);\n\n  _createClass(App, [{\n    key: \"componentWillMount\",\n    //React Life Cycle Methods hooks inform us of where the Component is in the life cycle and what we can and cannot do\n    //Call the loadWeb3 function\n    //Call function called loadBlockchainData\n    value: function () {\n      var _componentWillMount = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n        return _regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.next = 2;\n                return this.loadWeb3();\n\n              case 2:\n                _context.next = 4;\n                return this.loadBlockchainData();\n\n              case 4:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this);\n      }));\n\n      function componentWillMount() {\n        return _componentWillMount.apply(this, arguments);\n      }\n\n      return componentWillMount;\n    }() //function loadWeb3 \"given\" by metamask \"recomendation\": \"hey, here is how to connect webApp to web3 \" to connect with the browser\n\n  }, {\n    key: \"loadWeb3\",\n    value: function () {\n      var _loadWeb = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee2() {\n        return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                if (!window.ethereum) {\n                  _context2.next = 6;\n                  break;\n                }\n\n                window.web3 = new Web3(window.ethereum);\n                _context2.next = 4;\n                return window.ethereum.enable();\n\n              case 4:\n                _context2.next = 7;\n                break;\n\n              case 6:\n                if (window.web3) {\n                  window.web3 = new Web3(window.web3.currentProvider);\n                } else {\n                  window.alert('Non-Ethereum browser detected. You should consider trying Metamask!');\n                }\n\n              case 7:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2);\n      }));\n\n      function loadWeb3() {\n        return _loadWeb.apply(this, arguments);\n      }\n\n      return loadWeb3;\n    }() //Perform a task to ensure the WEb3 is connected into our App through\n    //Define function called loadBlockchainData\n    //Stash the web3 value\n    //first thing is to fetch the account that will connect into Metamask and *login\" into the page\n\n  }, {\n    key: \"loadBlockchainData\",\n    value: function () {\n      var _loadBlockchainData = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee3() {\n        var web3, accounts, networkId, networkData, abi, address, token, totalSupply, balanceOf, i, id, tokenURI;\n        return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                web3 = window.web3;\n                _context3.next = 3;\n                return web3.eth.getAccounts();\n\n              case 3:\n                accounts = _context3.sent;\n                //console.log(\"account\", accounts[0])\n                //Instead of logging into the console, it's time to use react and the state inside the html bar\n                this.setState({\n                  account: accounts[0]\n                }); //load smart contract\n\n                _context3.next = 7;\n                return web3.eth.net.getId();\n\n              case 7:\n                networkId = _context3.sent;\n                networkData = MemoryToken.networks[networkId]; //fetch the address only if it's depoloyed to the network\n\n                if (!networkData) {\n                  _context3.next = 35;\n                  break;\n                }\n\n                //to create a javascript version of the contract is also needed the ABI (jsonInterface)\n                abi = MemoryToken.abi;\n                address = networkData.address; //javascript version of the Smart Contract\n\n                token = new web3.eth.Contract(abi, address); //this.setState({ token: token })\n\n                this.setState({\n                  token\n                }); //web3 you also need to call the function \".call\"\n\n                _context3.next = 16;\n                return token.methods.totalSupply().call();\n\n              case 16:\n                totalSupply = _context3.sent;\n                this.setState({\n                  totalSupply\n                }); //Load Tokens\n\n                _context3.next = 20;\n                return token.methods.balanceOf(accounts[0]).call();\n\n              case 20:\n                balanceOf = _context3.sent;\n                i = 0;\n\n              case 22:\n                if (!(i < balanceOf)) {\n                  _context3.next = 33;\n                  break;\n                }\n\n                _context3.next = 25;\n                return token.methods.tokenOfOwnerByIndex(accounts[0], i).call();\n\n              case 25:\n                id = _context3.sent;\n                _context3.next = 28;\n                return token.methods.tokenURI(id).call();\n\n              case 28:\n                tokenURI = _context3.sent;\n                this.setState({\n                  tokenURIs: [].concat(_toConsumableArray(this.state.tokenURIs), [tokenURI])\n                });\n\n              case 30:\n                i++;\n                _context3.next = 22;\n                break;\n\n              case 33:\n                _context3.next = 36;\n                break;\n\n              case 35:\n                alert('Smart contract not deployed to detected network.');\n\n              case 36:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function loadBlockchainData() {\n        return _loadBlockchainData.apply(this, arguments);\n      }\n\n      return loadBlockchainData;\n    }() //constructor function initializes the component\n    //Now add to the State Object: token, total supply, and empty array thas is default for token URI\n    //Fill out the other states of the page, like the list of cards, the card chosen\n\n  }]);\n\n  function App(props) {\n    var _this;\n\n    _classCallCheck(this, App);\n\n    _this = _super.call(this, props);\n    _this.state = {\n      account: '0x0',\n      token: null,\n      totalSupply: 0,\n      tokenURIs: [],\n      cardArray: [],\n      cardsChosen: [],\n      cardsChosenId: [],\n      CardsWon: [],\n      Z\n    };\n    return _this;\n  } //render function with all the html code with some javascript inside\n\n\n  _createClass(App, [{\n    key: \"render\",\n    value: function render() {\n      return /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 123,\n          columnNumber: 7\n        }\n      }, /*#__PURE__*/React.createElement(\"nav\", {\n        className: \"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 124,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"a\", {\n        className: \"navbar-brand col-sm-3 col-md-2 mr-0\",\n        href: \"http://www.dappuniversity.com/bootcamp\",\n        target: \"_blank\",\n        rel: \"noopener noreferrer\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 125,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"img\", {\n        src: brain,\n        width: \"30\",\n        height: \"30\",\n        className: \"d-inline-block align-top\",\n        alt: \"\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 131,\n          columnNumber: 11\n        }\n      }), \"\\xA0 Memory Tokens\"), /*#__PURE__*/React.createElement(\"ul\", {\n        className: \"navbar-nav px-3\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 134,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"li\", {\n        className: \"nav-item text-nowrap d-none d-sm-none d-sm-block\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 135,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"small\", {\n        className: \"text-muted\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        id: \"account\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 136,\n          columnNumber: 45\n        }\n      }, this.state.account))))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"container-fluid mt-5\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 140,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"row\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 141,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"main\", {\n        role: \"main\",\n        className: \"col-lg-12 d-flex text-center\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 142,\n          columnNumber: 13\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"content mr-auto ml-auto\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 143,\n          columnNumber: 15\n        }\n      }, /*#__PURE__*/React.createElement(\"h1\", {\n        className: \"d-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 144,\n          columnNumber: 17\n        }\n      }, \"Edit this file in App.js!\"), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"grid mb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 146,\n          columnNumber: 17\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 152,\n          columnNumber: 17\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"grid mb-4\",\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 156,\n          columnNumber: 19\n        }\n      })))))));\n    }\n  }]);\n\n  return App;\n}(Component);\n\nexport default App;","map":{"version":3,"sources":["D:/blockchain/game/blochchain_game/src/components/App.js"],"names":["React","Component","Web3","MemoryToken","brain","App","loadWeb3","loadBlockchainData","window","ethereum","web3","enable","currentProvider","alert","eth","getAccounts","accounts","setState","account","net","getId","networkId","networkData","networks","abi","address","token","Contract","methods","totalSupply","call","balanceOf","i","tokenOfOwnerByIndex","id","tokenURI","tokenURIs","state","props","cardArray","cardsChosen","cardsChosenId","CardsWon","Z"],"mappings":"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","sourcesContent":["import React, { Component } from 'react';\r\nimport Web3 from 'web3'\r\nimport './App.css';\r\nimport MemoryToken from '../abis/MemoryToken.json'\r\nimport brain from '../brain.png'\r\n\r\n//client side of the application\r\n//This is the Main file write for the client side code a \"React.js\" compoment based \"class Name extends React.Component\" extends is where is inherits its behaviors. Mixins \r\n//React is a framework for building user interfacer in javascript mixin wuth html. React have a state object that stores the state of the application. State is like a kind of small database that stores inside the website \r\n//Memory Tokens string write on the top and \"brain\" logo on the left imported on the top of the file \r\n//Layout - A Nav bar \"the black navigation menu on the top of the page\"\r\n//Imported basic CSS from App.css that's using \"boostrap\" a UI framework for the nice style as in the site here \"&nbsp;\"\r\n\r\n//The webbrowser is already connected to the blockchain using truffle and ganache with metamask\r\n//It's time to connect the webApp to the blockchain using web3.js \r\n\r\n//Now the application is connected to the blockchain\r\n//and Metamask is connected, React App is working and talking to the blockchain\r\n\r\n//Now it's time to connect the Smart Contract from the blockchain and bring to the App as well\r\n//So this is the token created on \"MemoryToken.sol\" and bring into the App and load that information and put\r\n//into the state object as well. First import the Token on the on the top of the file. The \"ABI\" file.\r\n//First thing to do is to determine the network(ID) we connect to with ganache, because this tells the specific location of the address from the contract \r\n\r\n//Fetch the token smart contract - ok\r\n//now fetch the total supply\r\n\r\n//Now, load all the tokens \"for loop on test\"\r\n\r\n//Now all the blockchain data is loaded into the app\r\n\r\n//Now, fill out the states of other part of the game \r\n\r\n//Component called App\r\nclass App extends Component {\r\n  \r\n  //React Life Cycle Methods hooks inform us of where the Component is in the life cycle and what we can and cannot do\r\n  //Call the loadWeb3 function\r\n  //Call function called loadBlockchainData\r\n  async componentWillMount() {\r\n    await this.loadWeb3()\r\n    await this.loadBlockchainData()\r\n  }\r\n\r\n  //function loadWeb3 \"given\" by metamask \"recomendation\": \"hey, here is how to connect webApp to web3 \" to connect with the browser\r\n  async loadWeb3 () {\r\n    if (window.ethereum) {\r\n      window.web3 = new Web3(window.ethereum)\r\n      await window.ethereum.enable()\r\n    }\r\n    else if (window.web3) {\r\n      window.web3 = new Web3(window.web3.currentProvider)\r\n    }\r\n    else {\r\n      window.alert('Non-Ethereum browser detected. You should consider trying Metamask!')\r\n    }\r\n  }\r\n\r\n  //Perform a task to ensure the WEb3 is connected into our App through\r\n  //Define function called loadBlockchainData\r\n  //Stash the web3 value\r\n  //first thing is to fetch the account that will connect into Metamask and *login\" into the page\r\n  async loadBlockchainData() {\r\n    const web3 = window.web3\r\n    const accounts = await web3.eth.getAccounts()\r\n    //console.log(\"account\", accounts[0])\r\n    //Instead of logging into the console, it's time to use react and the state inside the html bar\r\n    this.setState({ account: accounts[0] })\r\n\r\n    //load smart contract\r\n    const networkId = await web3.eth.net.getId()\r\n    const networkData = MemoryToken.networks[networkId]\r\n    //fetch the address only if it's depoloyed to the network\r\n    if(networkData) {\r\n      //to create a javascript version of the contract is also needed the ABI (jsonInterface)\r\n      const abi = MemoryToken.abi\r\n      const address = networkData.address\r\n      //javascript version of the Smart Contract\r\n      const token = new web3.eth.Contract(abi, address)\r\n      //this.setState({ token: token })\r\n      this.setState({ token })\r\n      //web3 you also need to call the function \".call\"\r\n      const totalSupply = await token.methods.totalSupply().call()\r\n      this.setState({ totalSupply })\r\n      //Load Tokens\r\n      let balanceOf = await token.methods.balanceOf(accounts[0]).call()\r\n      //for loop to go to the entire balance \r\n      for (let i = 0; i < balanceOf; i++) {\r\n        let id = await token.methods.tokenOfOwnerByIndex(accounts[0], i).call()\r\n        let tokenURI = await token.methods.tokenURI(id).call()\r\n        this.setState({\r\n          tokenURIs: [...this.state.tokenURIs, tokenURI]\r\n        })\r\n      }\r\n    } else {\r\n      alert('Smart contract not deployed to detected network.')\r\n    }\r\n\r\n  }\r\n\r\n  \r\n  //constructor function initializes the component\r\n\r\n  //Now add to the State Object: token, total supply, and empty array thas is default for token URI\r\n  //Fill out the other states of the page, like the list of cards, the card chosen\r\n  constructor(props) {\r\n    super(props)\r\n    this.state = {\r\n      account: '0x0',\r\n      token: null,\r\n      totalSupply: 0,\r\n      tokenURIs: [],\r\n      cardArray: [],\r\n      cardsChosen: [],\r\n      cardsChosenId: [],\r\n      CardsWon: [],Z\r\n    }\r\n  }\r\n\r\n  //render function with all the html code with some javascript inside\r\n  render() {\r\n    return (\r\n      <div>\r\n        <nav className=\"navbar navbar-dark fixed-top bg-dark flex-md-nowrap p-0 shadow\">\r\n          <a\r\n            className=\"navbar-brand col-sm-3 col-md-2 mr-0\"\r\n            href=\"http://www.dappuniversity.com/bootcamp\"\r\n            target=\"_blank\"\r\n            rel=\"noopener noreferrer\"\r\n          >\r\n          <img src={brain} width=\"30\" height=\"30\" className=\"d-inline-block align-top\" alt=\"\" />\r\n          &nbsp; Memory Tokens\r\n          </a>\r\n          <ul className=\"navbar-nav px-3\">\r\n            <li className=\"nav-item text-nowrap d-none d-sm-none d-sm-block\">\r\n              <small className=\"text-muted\"><span id=\"account\">{this.state.account}</span></small>\r\n            </li>\r\n          </ul>\r\n        </nav>\r\n        <div className=\"container-fluid mt-5\">\r\n          <div className=\"row\">\r\n            <main role=\"main\" className=\"col-lg-12 d-flex text-center\">\r\n              <div className=\"content mr-auto ml-auto\">\r\n                <h1 className=\"d-4\">Edit this file in App.js!</h1>\r\n\r\n                <div className=\"grid mb-4\" >\r\n\r\n                  {/* Code goes here... */}\r\n\r\n                </div>\r\n\r\n                <div>\r\n\r\n                  {/* Code goes here... */}\r\n\r\n                  <div className=\"grid mb-4\" >\r\n\r\n                    {/* Code goes here... */}\r\n\r\n                  </div>\r\n\r\n                </div>\r\n\r\n              </div>\r\n\r\n            </main>\r\n          </div>\r\n        </div>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nexport default App;\r\n"]},"metadata":{},"sourceType":"module"}